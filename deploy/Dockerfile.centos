# 使用CentOS 8作为基础镜像
FROM centos:8
WORKDIR /app

# 添加构建参数
ARG CONFIGURE_REPOS_SCRIPT=configure_centos_repos.sh

# 复制配置脚本
COPY ${CONFIGURE_REPOS_SCRIPT} /tmp/configure_centos_repos.sh

# 配置CentOS 8的存储库（使用阿里云镜像源）
RUN chmod +x /tmp/configure_centos_repos.sh && \
    /tmp/configure_centos_repos.sh && \
    rm -f /tmp/configure_centos_repos.sh

# 安装必要的软件
RUN dnf clean all && \
    dnf makecache && \
    dnf install -y epel-release && \
    dnf install -y nginx curl procps net-tools vim wget logrotate git && \
    dnf module install -y nodejs:16 && \
    dnf install -y gcc gcc-c++ make zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel \
        openssl-devel tk-devel libffi-devel xz-devel && \
    dnf clean all

# 安装Python 3.10
RUN cd /tmp && \
    curl -O https://www.python.org/ftp/python/3.10.0/Python-3.10.0.tgz && \
    tar -xzf Python-3.10.0.tgz && \
    cd Python-3.10.0 && \
    ./configure --enable-optimizations && \
    make -j $(nproc) && \
    make altinstall && \
    ln -sf /usr/local/bin/python3.10 /usr/local/bin/python3 && \
    ln -sf /usr/local/bin/pip3.10 /usr/local/bin/pip3 && \
    cd /tmp && \
    rm -rf Python-3.10.0 Python-3.10.0.tgz

# 配置npm和pip镜像源
RUN npm config set registry https://registry.npmmirror.com && \
    pip3 config set global.index-url https://mirrors.aliyun.com/pypi/simple/ && \
    pip3 config set install.trusted-host mirrors.aliyun.com

# 配置网络设置
# 注意：在Docker中，/etc/resolv.conf是只读的，无法直接修改
# 我们在配置脚本中已经添加了hosts条目来解决一些DNS问题

# 创建目录
RUN mkdir -p /app/frontend /app/backend /app/panel /app/logs /app/data

# 复制前端代码
COPY web-frontend/ /app/frontend-src/

# 构建前端
WORKDIR /app/frontend-src
# 低内存环境优化（2核心2GB内存）
# 分步执行安装和构建，减少内存压力
# 注意：不使用--production参数，因为需要安装@vue/cli-service等开发依赖
RUN npm config set cache /tmp/npm-cache && \
    npm install --legacy-peer-deps --no-optional --no-audit --no-fund --prefer-offline && \
    rm -rf /tmp/npm-cache && \
    export NODE_OPTIONS="--max-old-space-size=1536" && \
    npm run build && \
    mkdir -p /app/frontend && \
    cp -r dist/* /app/frontend/ && \
    rm -rf node_modules && \
    rm -rf /app/frontend-src

# 复制后端代码
COPY simpletrade/ /app/backend/simpletrade/
COPY vnpy_custom/ /app/backend/vnpy_custom/
COPY setup.py requirements.txt /app/backend/

# 检查vnpy_custom目录是否存在
RUN ls -la /app/backend/vnpy_custom || echo "Warning: vnpy_custom directory does not exist!"

# 安装后端依赖
WORKDIR /app/backend
# 安装系统依赖
RUN dnf install -y gcc gcc-c++ make cmake python39-devel wget

# 安装Python依赖
RUN pip3 install --no-cache-dir -r requirements.txt

# 安装TA-Lib替代品
RUN pip3 install --no-cache-dir pandas-ta ta finta

# 使用vnpy_custom目录中的vnpy源码
# 不需要安装vnpy包或创建mock模块

# 复制部署面板
COPY deploy/panel/ /app/panel/

# 复制配置文件
COPY deploy/config/nginx.conf /etc/nginx/conf.d/default.conf

# 复制日志轮转配置
COPY deploy/config/logrotate.conf /etc/logrotate.d/simpletrade

# 创建日志目录
RUN mkdir -p /app/logs && \
    chmod 755 /app/logs

# 复制脚本
COPY deploy/scripts/start.sh /app/
RUN chmod +x /app/start.sh

WORKDIR /app
EXPOSE 80

# 启动服务
CMD ["/app/start.sh"]
