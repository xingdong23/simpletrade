# 使用多阶段构建
# 第一阶段：构建TA-Lib
FROM python:3.9-slim AS builder

# 设置环境变量，避免交互式提示
ENV DEBIAN_FRONTEND=noninteractive

# 使用阿里云镜像
RUN echo "deb https://mirrors.aliyun.com/debian/ bullseye main contrib non-free" > /etc/apt/sources.list && \
    echo "deb https://mirrors.aliyun.com/debian/ bullseye-updates main contrib non-free" >> /etc/apt/sources.list && \
    echo "deb https://mirrors.aliyun.com/debian-security bullseye-security main contrib non-free" >> /etc/apt/sources.list

# 安装构建TA-Lib所需的依赖
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    wget \
    && rm -rf /var/lib/apt/lists/*

# 下载并编译TA-Lib
WORKDIR /tmp
RUN wget -q -O ta-lib-0.4.0-src.tar.gz https://gitee.com/mirrors/ta-lib/raw/master/ta-lib-0.4.0-src.tar.gz || \
    wget -q -O ta-lib-0.4.0-src.tar.gz https://jztkft.dl.sourceforge.net/project/ta-lib/ta-lib/0.4.0/ta-lib-0.4.0-src.tar.gz && \
    tar -xzf ta-lib-0.4.0-src.tar.gz && \
    cd ta-lib/ && \
    ./configure --prefix=/usr && \
    make && \
    make install

# 第二阶段：构建最终镜像
FROM python:3.9-slim

# 设置环境变量，避免交互式提示
ENV DEBIAN_FRONTEND=noninteractive

# 使用阿里云镜像
RUN echo "deb https://mirrors.aliyun.com/debian/ bullseye main contrib non-free" > /etc/apt/sources.list && \
    echo "deb https://mirrors.aliyun.com/debian/ bullseye-updates main contrib non-free" >> /etc/apt/sources.list && \
    echo "deb https://mirrors.aliyun.com/debian-security bullseye-security main contrib non-free" >> /etc/apt/sources.list

# 安装系统依赖
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    git \
    libssl-dev \
    pkg-config \
    wget \
    curl \
    netcat-openbsd \
    vim \
    nano \
    htop \
    procps \
    iputils-ping \
    net-tools \
    telnet \
    dnsutils \
    lsof \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# 从构建阶段复制TA-Lib库
COPY --from=builder /usr/lib/libta_lib* /usr/lib/
COPY --from=builder /usr/include/ta-lib/ /usr/include/ta-lib/

# 设置工作目录
WORKDIR /app

# 配置pip使用清华镜像
RUN pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple && \
    pip config set global.trusted-host pypi.tuna.tsinghua.edu.cn

# 安装Python依赖
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# 安装常用Python工具
RUN pip install --no-cache-dir \
    ipython \
    jupyter \
    notebook \
    pandas \
    numpy \
    matplotlib \
    seaborn \
    scikit-learn \
    statsmodels \
    pytest \
    black \
    flake8 \
    isort \
    mypy \
    pylint

# 安装TA-Lib Python包
RUN pip install --no-cache-dir ta-lib

# 安装vnpy核心
RUN pip install --no-cache-dir \
    vnpy \
    vnpy_cta_strategy \
    vnpy_ctastrategy \
    vnpy_datamanager \
    vnpy_sqlite \
    vnpy_rest \
    vnpy_websocket \
    vnpy_csv \
    vnpy_mysql \
    vnpy_ctp \
    vnpy_ib \
    vnpy_tushare \
    vnpy_rqdata \
    vnpy_jotdx

# 创建常用目录
RUN mkdir -p /app/data /app/logs /app/configs /app/notebooks

# 复制启动脚本
COPY docker_scripts/ /app/docker_scripts/
RUN chmod +x /app/docker_scripts/*.sh

# 安装应用依赖
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# 验证vnpy安装
RUN python -c "from vnpy.trader.engine import MainEngine; print('VeighNa installation verified!')" || echo "VeighNa installation failed but continuing anyway"

# 复制应用代码
COPY . .

# 设置环境变量
ENV PYTHONPATH=/app
