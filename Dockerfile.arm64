# 使用Ubuntu 20.04作为基础镜像
FROM ubuntu:20.04

# 设置环境变量，避免交互式提示
ENV DEBIAN_FRONTEND=noninteractive \
    TZ=Asia/Shanghai \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    CONDA_AUTO_UPDATE_CONDA=false \
    CONDA_DEFAULT_ENV=base \
    PATH="/opt/conda/bin:$PATH"

# 设置工作目录
WORKDIR /app

# 使用官方源，但添加arm64架构支持
RUN apt-get update && \
    apt-get install -y --no-install-recommends ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# 安装系统依赖
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    git \
    libssl-dev \
    pkg-config \
    wget \
    curl \
    netcat \
    vim \
    nano \
    htop \
    procps \
    iputils-ping \
    net-tools \
    telnet \
    dnsutils \
    lsof \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# 安装 Miniconda
RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh -O ~/miniconda.sh && \
    /bin/bash ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh && \
    conda clean -a -y && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc

# 配置 Conda 使用清华镜像源
RUN conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ && \
    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ && \
    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ && \
    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ && \
    conda config --set show_channel_urls yes

# 使用 Conda 安装 numpy 和 ta-lib
RUN conda install -y -c conda-forge numpy ta-lib && \
    conda clean -a -y

# 配置pip使用国内镜像源（使用多个镜像源作为备选）
RUN mkdir -p ~/.pip && \
    echo "[global]" > ~/.pip/pip.conf && \
    echo "index-url = https://mirrors.aliyun.com/pypi/simple/" >> ~/.pip/pip.conf && \
    echo "extra-index-url = https://pypi.tuna.tsinghua.edu.cn/simple https://mirrors.cloud.tencent.com/pypi/simple https://mirrors.bfsu.edu.cn/pypi/web/simple" >> ~/.pip/pip.conf && \
    echo "trusted-host = mirrors.aliyun.com pypi.tuna.tsinghua.edu.cn mirrors.cloud.tencent.com mirrors.bfsu.edu.cn" >> ~/.pip/pip.conf && \
    echo "timeout = 120" >> ~/.pip/pip.conf

# 升级pip并安装常用工具（在Conda环境中执行）
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip config set global.progress_bar off && \
    pip config set global.no-cache-dir true && \
    pip config set global.disable-pip-version-check true

# 安装常用Python工具（分批安装以加快进程，直接指定国内镜像源）
RUN pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com pandas && \
    pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com ipython jupyter notebook && \
    pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com matplotlib seaborn && \
    pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com pytest black flake8 isort mypy pylint

# 安装vnpy核心（直接指定国内镜像源加速下载）
RUN echo "Installing vnpy core..." && \
    pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com vnpy && \
    echo "Installing vnpy essential modules..." && \
    pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com vnpy_cta_strategy vnpy_ctastrategy vnpy_datamanager vnpy_sqlite && \
    echo "Installing vnpy network modules..." && \
    pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com vnpy_rest vnpy_websocket && \
    echo "Installing vnpy data modules..." && \
    pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com vnpy_csv vnpy_mysql && \
    echo "Installing vnpy optional modules (errors will be ignored)..." && \
    pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com vnpy_ctp || echo "Failed to install vnpy_ctp, continuing..." && \
    pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com vnpy_ib || echo "Failed to install vnpy_ib, continuing..." && \
    pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com vnpy_tushare || echo "Failed to install vnpy_tushare, continuing..." && \
    pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com vnpy_rqdata || echo "Failed to install vnpy_rqdata, continuing..." && \
    pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com vnpy_jotdx || echo "Failed to install vnpy_jotdx, continuing..." && \
    echo "VeighNa installation completed."

# 创建常用目录
RUN mkdir -p /app/data /app/logs /app/configs /app/notebooks

# 复制启动脚本
COPY docker_scripts/ /app/docker_scripts/
RUN chmod +x /app/docker_scripts/*.sh

# 安装应用依赖
COPY requirements.txt .
RUN pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com -r requirements.txt

# 验证vnpy安装
RUN echo "Verifying VeighNa installation..." && \
    python -c "import vnpy; print(f'VeighNa version: {vnpy.__version__}')" && \
    python -c "from vnpy.trader.engine import MainEngine; print('VeighNa MainEngine imported successfully!')" || \
    echo "VeighNa installation verification failed but continuing anyway"

# 复制应用代码
COPY . .

# 设置环境变量
ENV PYTHONPATH=/app
